#!/usr/bin/env bds

#-------------------------------------------------------------------------------
# Epistasis project
#
#															Pablo Cingolani 2014
#-------------------------------------------------------------------------------

debug			:= false
snpEffDir		:= "$HOME/snpEff"
dir				:= "$snpEffDir/epistasis"

# Parameters
aaContactDist	:= 3.0	# Distance between AA to be considered 'in contact'
aaMinSepration	:= 25	# Number of AA separation to consider them for distance analysis
genome			:= "hg19"
genomeEnsembl	:= "GRCh37.75"

# Data files
aaContact		:= "$dir/aa.contact.txt"
aaContactSeq	:= "$dir/aa.contact.sequence.txt"
aaContactBest	:= "$dir/aa.contact.best.txt"
idMap			:= "$dir/idMap_ensemblId_refseq_pdbId.txt"
idMapConfirmed	:= "$dir/idMap_ensemblId_refseq_pdbId.confirmed.txt"
idMapBest		:= "$dir/idMap_ensemblId_refseq_pdbId.best.txt"
msa				:= "$snpEffDir/db/multiz100way/refGene.exonAA.fa"
pdbDir			:= "$snpEffDir/db/pdb/pdb_hires_human"
qhat			:= "$dir/Qhat.txt"
tree			:= "$snpEffDir/db/multiz100way/hg19.100way.nh"
snpeffConfig	:= "$snpEffDir/snpEff.config"
bgNum			:= 10 * 1000 * 1000	# Number of iterations for background calculation

# Commands
#cmdEpistasis	:= "java -Xmx4G -jar Epistasis.jar"
cmdEpistasis	:= "java -Xmx20G -jar Epistasis.jar"

# Change parameters if we are debugging (smaller datasets)
if( debug ) {
	print("DEBUG MODE: Setting 'debug' paths\n")
	genome = "testHg19Chr1"
	msa  = "$dir/head.fa"
	qhat = "$dir/Qhat_head.txt"
	bgNum = 1000
}

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------

# Confirm mappings between Pdb <-> Genome by making sure that 
# protein sequences match (within cerain error rate)
print("\nMap Pdb entries to transcripts: '$idMapConfirmed'\n")
task( idMapConfirmed <- [pdbDir, tree, msa, idMap] )	sys $cmdEpistasis mapPdbGenome $snpeffConfig $genome $pdbDir $idMap | tee $idMapConfirmed
wait

# Calculate amino acids "in contact" within the same protein
# using PDB atomic positions
print("\nCalculate AA in contact within proteins: '$aaContact'\n")
tmp := "$aaContact.tmp"
task( aaContact <- [pdbDir, idMapConfirmed] ) {
	sys $cmdEpistasis pdbdist $aaContactDist $aaMinSepration $pdbDir $idMapConfirmed > $tmp
	sys cat $tmp | grep "^Contact:" | cut -f 2- | sort | uniq > $aaContact
}
wait

# Add MSA sequences to the previously calculated 'Aa in contact' file
print("\nAdd MSA information to AA in contact: '$aaContactSeq'\n")
task( aaContactSeq <- aaContact )	sys $cmdEpistasis addMsaSeqs $snpeffConfig $genome $tree $msa $idMapConfirmed $aaContact > $aaContactSeq
wait

# Find "best ID Mappings": For each gene, select one transcript and one PDB entry 
# that has longer Aa sequences (for PDB and transcript), as well as the 
# most 'AA in contact'
print("\nCalculate 'best' mapping: '$idMapBest'\n")
task( idMapBest <- [aaContactSeq, idMapConfirmed] )	sys $cmdEpistasis mapPdbGenomeBest $idMapConfirmed $aaContactSeq > $idMapBest
wait

# Filter AA in contact' file according to 'ID best map'
print("\nFilter 'AA in contact' using 'best' mapping: '$aaContactBest'\n")
task( aaContactBest <- [aaContactSeq, idMapBest] )	sys $cmdEpistasis aaFilterIdMap $idMapBest $aaContactSeq > $aaContactBest
wait

# Estimate transition matrix Q from sequence alignment 
# and phylegenetic tree
print("\nEstimate Q: '$qhat'\n")
task( qhat <- [tree, msa] )	sys $cmdEpistasis Qhat $tree $msa $idMapBest > $qhat
wait

# Annotations of amino acids "in contact" using NextProt
aaNextProt := "$dir/aa.contact.nextProt.txt"
print("\nAnnotating with NextProt: '$aaNextProt'\n")
task( aaNextProt <- aaContactBest )	sys $cmdEpistasis nextprot $snpeffConfig $genomeEnsembl $idMapBest $aaContactBest > $aaNextProt
wait

# Calculate values (MI, VarInf, etc.) for AA sequeces 'in contact'
for( string type : ['mi', 'varInf'] ) {
	# Single base
	aaStats := "$dir/aa.contact.$type.txt"
	aaStatsSummary := "$dir/aa.contact.$type.summary.txt"
	print("\nCalculating $type:\n\t'$aaStats'\n\t'$aaStatsSummary'\n")
	task( aaStats <- aaNextProt )	sys $cmdEpistasis aaContactStats $type $aaNextProt > $aaStats 2> $aaStatsSummary

	# Three bases
	aaStats3 := "$dir/aa.contact.$type.3.txt"
	aaStatsSummary3 := "$dir/aa.contact.$type.3.summary.txt"
	print("\nCalculating $type (3 bases):\n\t'$aaStats3'\n\t'$aaStatsSummary3'\n")
	task( aaStats3 <- aaNextProt )	sys $cmdEpistasis aaContactStatsN $type 1 $tree $msa $idMapBest $aaNextProt > $aaStats3 2> $aaStatsSummary3
}
wait

# Calculate background distribution for MI and VarInf
for( string type : ['mi', 'varInf'] ) {
	# Single base background model
	bg := "$dir/bg.$type.summary.txt"
	bgDetails := "$dir/bg.$type.details.txt"
	print("\nCalculating background distribution ($bgNum iterations): '$bg'\n")
	task( bgDetails <- [tree, msa] ) sys $cmdEpistasis background $type 0 $bgNum $tree $msa $idMapBest 2>$bg >$bgDetails
	wait

	# Three bases background model
	bg3 := "$dir/bg.$type.3.summary.txt"
	bg3Details := "$dir/bg.$type.3.details.txt"
	print("\nCalculating background distribution ($bgNum iterations): '$bg3'\n")
	task( bg3Details <- [tree, msa] ) sys $cmdEpistasis background $type 1 $bgNum $tree $msa $idMapBest 2>$bg3 >$bg3Details
	wait
}

# Calculate conservation statistics for many AA windows sizes
aaCons := "$dir/aa.conservation.txt"
print("\nCalculating conservation: '$aaCons'\n")
task( aaCons <- [tree, msa, aaContactBest] )	sys $cmdEpistasis conservation $tree $msa $idMapBest $aaContactBest | tee $aaCons
wait

# Calculate AA-pairs transitions for 'AA in contact'. Also calculate 'null' distribution
# Note: These are 400x400 matrices 
trM := "$dir/transitions.txt"
print("\nCalculating transitions ($bgNum iterations): '$trM'\n")
task( trM <- [tree, msa, aaContactBest] )	sys $cmdEpistasis transitions $bgNum $tree $msa $idMapBest $aaContactBest > $trM 
wait

# Calculate AA frequencies
aaFreqs := "$dir/aa.frequencies.txt"
print("\nCalculating AA frequencies: '$aaFreqs'\n")
task( aaFreqs <- [tree, msa] )	sys $cmdEpistasis aaFreqs $tree $msa $idMapBest > $aaFreqs
wait

# Create a BED file from MSA coordinates. To show coverage, load this BED file in IGV.
msaBed := "$dir/" + msa.baseName().swapExt(".fa", ".bed")
print("\nCreatig BED file: '$msaBed'\n")
task( msaBed <- msa )	sys cat $msa | grep _hg19 | cut -f 5 -d " " | tr -d "+" | sed "s/-$//" | tr ":-" "\t\t" > $msaBed
wait

# Done
wait
print("\nDone!\n")
