#!/usr/bin/env bds

#-------------------------------------------------------------------------------
# Epistasis project
#
#															Pablo Cingolani 2014
#-------------------------------------------------------------------------------

debug			:= false
timeout			:= 5 * day
#system			:= 'cluster'
cpus			:= ( system == 'local' ? 4 : 4 )

# Which step/s to perform
step1			:= false
step2			:= false
step3			:= false
step4			:= false
step5			:= false
step6			:= false
step7			:= false

# Parameters
snpEffDir		:= "$HOME/snpEff"
dir				:= "$snpEffDir/epistasis"
aaContactDist	:= 3.0	# Distance between AA to be considered 'in contact'
aaMinSepration	:= 25	# Number of AA separation to consider them for distance analysis
genome			:= "hg19"
genomeEnsembl	:= "GRCh37.75"
llGeneLines		:=	5

# Data files
aaContact		:= "$dir/aa.contact.txt"
aaContactSeq	:= "$dir/aa.contact.sequence.txt"
aaContactBest	:= "$dir/aa.contact.best.txt"
aaFreqs			:= "$dir/aa.frequencies.txt"
aa2Freqs		:= "$dir/aa.contact.frequencies.txt"
aaNextProt		:= "$dir/aa.contact.nextProt.txt"
idMap			:= "$dir/idMap_ensemblId_refseq_pdbId.txt"
idMapConfirmed	:= "$dir/idMap_ensemblId_refseq_pdbId.confirmed.txt"
idMapBest		:= "$dir/idMap_ensemblId_refseq_pdbId.best.txt"
interactions    := "$dir/interactions.txt"
interactionsNull:= "$dir/interactions.NON_INTERACTING.txt"
lik				:= "$dir/likelihood.contact.txt"
likAll			:= "$dir/likelihood.all.txt"
likNull			:= "$dir/likelihood.null.txt"
lik3			:= "$dir/likelihood_aa3.contact.txt"
likNull3		:= "$dir/likelihood_aa3.null.txt"
msa				:= "$snpEffDir/db/multiz100way/refGene.exonAA.fa"
msaBest			:= "$dir/msas.best.fa"
pdbDir			:= "$snpEffDir/db/pdb/pdb_hires_human"
pheno			:= "$dir/pheno.txt"
qhat			:= "$dir/Qhat.txt"
qhat2			:= "$dir/Qhat2.txt"
snpeffConfig	:= "$snpEffDir/snpEff.config"
tree			:= "$dir/hg19.100way.nh"
vcf				:= "$dir/gwas.vcf"

bgNum			:= 10 * 1000 * 1000	# Number of iterations for background calculation

# Commands
javaNativeLibs      := "$dir/lib"
javaGC		        := ( system != 'local' ? '-XX:ParallelGCThreads=2' : '')
javaMem		        := "4G"
javaMemXL	        := "20G"
java		        := "java -Xmx$javaMem $javaGC "
javaXL		        := "java -Xmx$javaMemXL $javaGC "
cmdEpistasis        := "$java -Djava.library.path=$javaNativeLibs -jar $HOME/snpEff/Epistasis.jar"
cmdEpistasisXL      := "$javaXL -Djava.library.path=$javaNativeLibs -jar $HOME/snpEff/Epistasis.jar"
cmdTable2Matrix     := "$dir/scripts/aaTable2Matrix.pl"
cmdPdbCompoundLines := "$dir/scripts/pdbCompoundLines.sh"

# Change parameters if we are debugging (smaller datasets)
if( debug ) {
	println "DEBUG MODE: Setting 'debug' paths"
	genome = "testHg19Chr1"
	msa  = "$dir/head.fa"
	qhat = "$dir/Qhat_head.txt"
	bgNum = 1000
}

#-------------------------------------------------------------------------------
# Analize gene-gene interaction log-likelihood(MSA)
#-------------------------------------------------------------------------------

void geneGeneLogLik(string dirOut, string interactions) {
	println "\nEstimate log-Likelihood for all gene-gene combinations: $likAll"

	dirOut.mkdir()
	if( system == 'local' ) {
		# Launch one process
		out := "$dirOut/likelihood.txt"
		task( out <- interactions ) {
			sys $cmdEpistasis likelihoodAll -1 $tree $msaBest $idMapBest $qhat $aaFreqs $qhat2 $aa2Freqs $interactions $dirOut > $out
		}
	} else {
		# Read interactions and split into small files
		pairs := readInteractions( interactions, dirOut )

		# Split into small lists
		sys rm -vf $dirOut/genes_pairs_list.* || true
		filesPairs := pairs.splitToFile( "$dirOut/genes_pairs_list.", llGeneLines )

		# Launch a task for eah file
		for( string file : filesPairs ) {
			out := "$dirOut/likelihood." + file.baseName()
			println "\t$out"
			task( out <- file ) {
				sys $cmdEpistasis likelihoodAll $cpus $tree $msaBest $idMapBest $qhat $aaFreqs $qhat2 $aa2Freqs $file $dirOut > $out
			}
		}
	}
}

#-------------------------------------------------------------------------------
# Calculate best scores from pre-calculated LL(MSA) on gene-gene pairs
#-------------------------------------------------------------------------------
void geneGeneLogLikMatrix(string geneGeneDir) {
	geneGene := sys find $geneGeneDir -iname "*.txt"
	geneGeneList := geneGene.lines()

	print "calculating likelihoodGeneGeneMatrix: '$geneGeneDir'\n"
	maxSplit := 10
	for( int split=0 ; split < maxSplit ; split++ ) {
		sl := geneGeneList.split(split, maxSplit)
		files := sl.join(" ")
		len := sl.size()

		out := "$geneGeneDir/likelihoodGeneGeneMatrix.$split.$maxSplit.txt"
		print "\t$out\tnumber of files: $len\n"
		task( out <- sl ) {
			sys $cmdEpistasis likelihoodGeneGeneMatrix $tree $msaBest $files | tee $out
		}
	}
}

#-------------------------------------------------------------------------------
# Likelihood for interactions from a variant in a VCF file and all other 
# sites withn a protein
#-------------------------------------------------------------------------------

void likelihoodvcf(string vcfFile, string dirOut, int numSplits) {
	println "\nLogLikelihood of MSA (interaction) using VCF file '$vcfFile'"
	dirOut.mkdir()

	for( int i=0 ; i < numSplits ; i++ ) {
		println "\t$i / $numSplits"

		base := vcfFile.baseName(".vcf")
		outputFile := "$dirOut/likelihood.$numSplits.$i.txt"
		task( outputFile <- [vcfFile, msaBest, qhat, qhat, aaFreqs, aa2Freqs] ) {
			sys $cmdEpistasisXL likelihoodvcf $cpus $tree $msaBest $qhat $aaFreqs $qhat2 $aa2Freqs $snpeffConfig $genome $vcfFile $numSplits $i $dirOut > $outputFile
		}
	}
}

#-------------------------------------------------------------------------------
# Read gene-gene interactions
#-------------------------------------------------------------------------------
string[] readInteractions(string intFile, string dirGenesLike) {
	string[] pairs
	string gene1, gene2

	# Keep interactions that haven't been calculated so far
	for( string gg : intFile.read().lines() ) {
		(gene1, gene2) = gg.split('\t')
		if( gene2 < gene1 )		(gene1, gene2) = [gene2, gene1]

		# Does 'gene likelihood' file exist?
		if( ! "$dirGenesLike/$gene1/$gene2.txt".exists() )	pairs += "$gene1\t$gene2"
	}

	return pairs
}

#-------------------------------------------------------------------------------
# Get part of 'splitNum' out of 'maxSplitNum' from a list
#-------------------------------------------------------------------------------
string[] split(string[] list, int splitNum, int maxSplitNum) {
	string[] newList
	idx := 0

	for(string s : list) {
		if( (idx % maxSplitNum) == splitNum )	newList += s
		idx++
	}

	return newList
}

#-------------------------------------------------------------------------------
# Split a list into small files
# Return file names
#-------------------------------------------------------------------------------
string[] splitToFile( string[] list, string baseName, int linesPerFile) {
	println "Splitting into $linesPerFile line per file:"
	string[] fileNames
	string[] thisFileLines

	# Split liens
	for( string line : list ) {
		# Enough lines to create a new file?
		if( thisFileLines.size() >= linesPerFile ) {
		 	fileName := baseName + fileNames.size()
			fileName.write( thisFileLines.join("\n") )
			fileNames += fileName
			thisFileLines = []
		}

		thisFileLines += line
	}

	# Write last list
	if( ! thisFileLines.isEmpty() ) {
	 	fileName := baseName + fileNames.size()
		fileName.write( thisFileLines.join("\n") )
		fileNames += fileName
	}

	return fileNames
}

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------

#---
# Part 1: Mapping between Pbd, MSA and genome
#---

if( step1 ) {
	# Confirm mappings between Pdb <-> Genome by making sure that 
	# protein sequences match (within cerain error rate)
	println "\nMap Pdb entries to transcripts: '$idMapConfirmed'"
	task( idMapConfirmed <- [pdbDir, tree, msa, idMap] )	sys $cmdEpistasis mapPdbGenome $snpeffConfig $genome $pdbDir $idMap | tee $idMapConfirmed
	wait

	# Calculate amino acids "in contact" within the same protein
	# using PDB atomic positions
	println "\nCalculate AA in contact within proteins: '$aaContact'"
	tmp := "$aaContact.tmp"
	task( aaContact <- [pdbDir, idMapConfirmed] ) {
		sys $cmdEpistasis pdbdist $aaContactDist $aaMinSepration $pdbDir $idMapConfirmed > $tmp
		sys cat $tmp | grep "^AA_IN_CONTACT" | cut -f 2- | sort | uniq > $aaContact
	}
	wait

	# Add MSA sequences to the previously calculated 'Aa in contact' file
	println "\nAdd MSA information to AA in contact: '$aaContactSeq'"
	task( aaContactSeq <- aaContact )	sys $cmdEpistasis addMsaSeqs $snpeffConfig $genome $tree $msa $idMapConfirmed $aaContact > $aaContactSeq
	wait

	# Find "best ID Mappings": For each gene, select one transcript and one PDB entry 
	# that has longer Aa sequences (for PDB and transcript), as well as the 
	# most 'AA in contact'
	println "\nCalculate 'best' mapping: '$idMapBest'"
	task( idMapBest <- [aaContactSeq, idMapConfirmed] )	sys $cmdEpistasis mapPdbGenomeBest $idMapConfirmed $aaContactSeq > $idMapBest
	wait

	# Filter AA in contact' file according to 'ID best map'
	println "\nFilter 'AA in contact' using 'best' mapping: '$aaContactBest'"
	task( aaContactBest <- [aaContactSeq, idMapBest] )	sys $cmdEpistasis aaFilterIdMap $idMapBest $aaContactSeq > $aaContactBest
	wait

	# Annotations of amino acids "in contact" using NextProt
	println "\nAnnotating with NextProt: '$aaNextProt'"
	task( aaNextProt <- aaContactBest )	sys $cmdEpistasis nextprot $snpeffConfig $genomeEnsembl $idMapBest $aaContactBest > $aaNextProt
	wait
}

#---
# Part 2: Statistics, MI, VarInf
#---

if( step2 ) {
	# Calculate values (MI, VarInf, etc.) for AA sequeces 'in contact'
	for( string type : ['mi', 'varInf'] ) {
		# Single base
		aaStats := "$dir/aa.contact.$type.txt"
		aaStatsSummary := "$dir/aa.contact.$type.summary.txt"
		println "\nCalculating $type:\n\t'$aaStats'\n\t'$aaStatsSummary'"
		task( aaStats <- aaNextProt )	sys $cmdEpistasis aaContactStats $type $aaNextProt > $aaStats 2> $aaStatsSummary

		# Three bases
		aaStats3 := "$dir/aa.contact.$type.3.txt"
		aaStatsSummary3 := "$dir/aa.contact.$type.3.summary.txt"
		println "\nCalculating $type (3 bases):\n\t'$aaStats3'\n\t'$aaStatsSummary3'"
		task( aaStats3 <- aaNextProt )	sys $cmdEpistasis aaContactStatsN $type 1 $tree $msa $idMapBest $aaNextProt > $aaStats3 2> $aaStatsSummary3
	}
	wait

	# Create files for R
	println "Create R files"
	aaStats := "$dir/aa.contact.mi.txt"
	aaStatsR := "$dir/aa.contact.stats.txt";
	task( aaStatsR <- aaStats ) {
		sys echo -e "mi\thxy\tvarinf\thcond.xy\thcond.yx\thx\thy\tcons.x\tcons.y" > $aaStatsR
		sys cat $aaStats | cut -f 19- >> $aaStatsR
	}

	# Create R data files
	for( string type : ['mi', 'varInf'] ) {
		aaStats3 := "$dir/aa.contact.$type.3.txt"
		aaStats3R := "$dir/aa.contact.$type.3.vals.txt"

		println "\nCreating R data file  $type (3 bases): '$aaStats3R'"
		task( aaStats3R <- aaStats3 ) {
			sys echo $type > $aaStats3R
			sys cut -f 19 $aaStats3 >> $aaStats3R
		}
	}
	wait

	# Calculate background distribution for MI and VarInf
	for( string type : ['mi', 'varInf'] ) {
		# Single base background model
		bg := "$dir/bg.$type.summary.txt"
		bgDetails := "$dir/bg.$type.details.txt"
		println "\nCalculating background distribution ($bgNum iterations): '$bg'"
		task( bgDetails <- [tree, msa] ) sys $cmdEpistasis background $type 0 $bgNum $tree $msa $idMapBest 2>$bg >$bgDetails
		wait

		# Three bases background model
		bg3 := "$dir/bg.$type.3.summary.txt"
		bg3Details := "$dir/bg.$type.3.details.txt"
		println "\nCalculating background distribution ($bgNum iterations): '$bg3'"
		task( bg3Details <- [tree, msa] ) sys $cmdEpistasis background $type 1 $bgNum $tree $msa $idMapBest 2>$bg3 >$bg3Details
		wait
	}

	# Calculate conservation statistics for many AA windows sizes
	aaCons := "$dir/aa.conservation.txt"
	println "\nCalculating conservation: '$aaCons'"
	task( aaCons <- [tree, msa, aaContactBest] )	sys $cmdEpistasis conservation $tree $msa $idMapBest $aaContactBest | tee $aaCons
	wait

	# Create a BED file from MSA coordinates. To show coverage, load this BED file in IGV.
	msaBed := "$dir/" + msa.baseName().swapExt(".fa", ".bed")
	println "\nCreatig BED file: '$msaBed'"
	task( msaBed <- msa )	sys cat $msa | grep _hg19 | cut -f 5 -d " " | tr -d "+" | sed "s/-$//" | tr ":-" "\t\t" > $msaBed
	wait
}

#---
# Part 3: AA frequencies, Transitions matrices, AA-pairs transitions
#---

if( step3 ) {
	aaContactMISumm := "$dir/aa.contact.mi.summary.txt"
	aaContactVISumm := "$dir/aa.contact.varInf.summary.txt"
	aaCountMatrix := "$dir/aa.count.matrix.txt"
	aaMiMatrix := "$dir/aa.mi.matrix.txt"
	aaViMatrix := "$dir/aa.vi.matrix.txt"
	task( aaCountMatrix <- aaContactMISumm ) {
		sys cat $aaContactMISumm | grep -w COUNT_AA                      | cut -f 2-  | tr "-" "\t" | $cmdTable2Matrix | tee $aaCountMatrix
		sys cat $aaContactMISumm | grep -w COUNT_AA_NON_FULL_CONS_mi     | cut -f 2,5 | tr "-" "\t" | $cmdTable2Matrix | tee $aaMiMatrix
		sys cat $aaContactVISumm | grep -w COUNT_AA_NON_FULL_CONS_varInf | cut -f 2,5 | tr "-" "\t" | $cmdTable2Matrix | tee $aaViMatrix
	}

	# Calculate AA-pairs transitions for 'AA in contact'. Also calculate 'null' distribution
	# Note: These are 400x400 matrices 
	trM := "$dir/transitions.txt"
	println "\nCalculating transitions ($bgNum iterations): '$trM'"
	task( trM <- [tree, msa, aaContactBest] )	{
		sys $cmdEpistasis transitions $bgNum $tree $msa $idMapBest $aaContactBest > $trM 
		sys grep AA_SINGLE_IN_CONTACT $trM		| cut -f 2- > $dir/transitions.aa_single.in_contact.txt
		sys grep AA_SINGLE_BG $trM				| cut -f 2- > $dir/transitions.aa_single.bg.txt
		sys grep AA_PAIRS_IN_CONTACT $trM		| cut -f 2- > $dir/transitions.aa_pairs.in_contact.txt
		sys grep AA_PAIRS_BG_RAND $trM			| cut -f 2- > $dir/transitions.aa_pairs.bg_rand.txt
		sys grep AA_PAIRS_BG_WITHIN_PROT $trM	| cut -f 2- > $dir/transitions.aa_pairs.bg_within_prot.txt
	}

	wait

	# Calculate AA frequencies
	println "\nCalculating AA frequencies: '$aaFreqs'"
	task( aaFreqs <- [tree, msa, idMapBest] )	sys $cmdEpistasis aaFreqs $tree $msa $idMapBest > $aaFreqs
	wait
}

#---
# Part 4: Estimate transition matrices Q from sequence alignment and phylegenetic tree
#---

if( step4 ) {
	task( msaBest <- [tree, msa, idMapBest, idMapBest] ) sys $cmdEpistasis filterMsa $tree $msa $idMapBest > $msaBest
	wait 

	println "\nEstimate Q: '$qhat'"
	task( qhat <- [tree, msaBest, idMapBest] )	{
		sys $cmdEpistasis Qhat $tree $msaBest $idMapBest > $qhat.log
		sys grep "^Q_HAT_MATRIX" $qhat.log | cut -f 2- > $qhat
	}
	wait

	println "\nEstimate Q2 (400x400): '$qhat2'"
	task( qhat2 <- [tree, msaBest, idMapBest, aaContactBest] ) {
		sys $cmdEpistasis Qhat2 $tree $msaBest $idMapBest $aaContactBest > $qhat2.log
		sys grep "^Q_HAT2_MATRIX" $qhat2.log | cut -f 2- > $qhat2
		sys grep "^PI_AA_PAIR" $qhat2.log | cut -f 3,5 > $aa2Freqs
	}
	wait
}

#---
# Part 5: Likelihood from epistatic model
#---

if( step5 ) {
	println "\nEstimate log-Likelihood: '$lik'"
	task( lik <- [tree, msaBest, idMapBest, aaContactBest, qhat, aaFreqs, qhat2, aa2Freqs] ) {
		sys $cmdEpistasis likelihood $tree $msaBest $idMapBest $aaContactBest $qhat $aaFreqs $qhat2 $aa2Freqs | tee $lik
	}

	println "\nEstimate log-Likelihood null distribution: $likNull"
	task( likNull <- [tree, msaBest, idMapBest, qhat, aaFreqs, qhat2, aa2Freqs] ) {
		sys $cmdEpistasis likelihoodNull $bgNum $tree $msaBest $idMapBest $qhat $aaFreqs $qhat2 $aa2Freqs > $likNull
	}

	println "\nEstimate log-Likelihood (3-AA neighborhood): '$lik3'"
	task( lik3 <- [tree, msaBest, idMapBest, aaContactBest, qhat, aaFreqs, qhat2, aa2Freqs] ) {
		sys $cmdEpistasis likelihood3 $tree $msaBest $idMapBest $aaContactBest $qhat $aaFreqs $qhat2 $aa2Freqs | tee $lik3
	}

	bgNum = 100 * 1000	# Number of iterations for background calculation
	println "\nEstimate log-Likelihood null distribution (3-AA neighborhood): $likNull3"
	task( likNull3 <- [tree, msaBest, idMapBest, qhat, aaFreqs, qhat2, aa2Freqs] ) {
		sys $cmdEpistasis likelihoodNull3 $bgNum $tree $msaBest $idMapBest $qhat $aaFreqs $qhat2 $aa2Freqs | tee $likNull3
	}

	#---
	# Gene-Gene Log likelihood (MSA) analysis: All possible pairs
	#---
	geneGeneLogLik("$dir/interactions/alt", interactions)
	geneGeneLogLik("$dir/interactions/null", interactionsNull)
}

#---
# Part 6: GWAS
#---

if( step6 ) {
	println "\nGWAS analysis using epistasis data"

	# GWAs using interaction (MSA) data
	numSplits := 30
	dirGwasOut := "$dir/gwas"
	dirGwasOut.mkdir()
	for( int i=0 ; i < numSplits ; i++ ) {
		for( int j=i ; j < numSplits ; j++ ) {
			println "\t$i $j / $numSplits"
			gwasOut := "$dirGwasOut/gwas.$numSplits.$i.$j.txt"

			task( gwasOut <- [vcf, pheno, msaBest, qhat, qhat, aaFreqs, aa2Freqs] ) {
				sys $cmdEpistasisXL gwas $cpus $tree $msaBest $qhat $aaFreqs $qhat2 $aa2Freqs $snpeffConfig $genome $vcf $pheno $numSplits $i $j > $gwasOut
			}
		}
	}
}

#---
# Part 7: Validation
#---

if( step7 ) {
	#---
	# Do ClinVar entries have better LL_MSA than 'null'?
	#---
	println "\nClinVar analysis"
	clinVar := "$dir/clinvar-latest.pass.vcf.gz"
	dirOut := "$dir/likelihood.clinvar"
	numSplits := 100
	likelihoodvcf(clinVar, dirOut, numSplits)

	# Use dbSnp entries from 1000 Genomes (this should be the 'null' distribution to compare clinVar)
	println "\nLogLikelihood of MSA (interaction) using 1000-Genomes project"
	g1k := "$dir/g1k.subsample.vcf"
	dirOut = "$dir/likelihood.g1k"
	likelihoodvcf(g1k, dirOut, numSplits)

	# Use dbSnp entries from 1000 Genomes (this should be the 'null' distribution to compare clinVar)
	println "\nLogLikelihood of MSA (interaction) using HGMD"
	hgmd := "$dir/HGMD.vcf"
	dirOut = "$dir/likelihood.hgmd"
	numSplits = 200
	likelihoodvcf(hgmd, dirOut, numSplits)

	# Interacting vs non interacting genes LL(MSA) statistics
	geneGeneLogLikMatrix("$dir/interactions/alt")
	geneGeneLogLikMatrix("$dir/interactions/null")
}

#	#---
#	# Find LL(MSA) on interacting proteins (COMPOUND entries in pdb)
#	#---

	# Select a set of pdb entries having interacting protein structures ('COMPOUND' entries)
	# Find ID map for those entries
	pdbCompound := "$dir/pdbCompoundLines.human.txt"
	pdbCompoundList := "$dir/pdbCompoundLines.human.pdb_list.txt"
	idMapPdbCompound := "$dir/idMap_ensemblId_refseq_pdbId.pdbCompound.txt"
	msasCompound := "$dir/msas.pdb_compound.fa"

#	task( [pdbCompound, pdbCompoundList, idMapPdbCompound] <- pdbDir ) {
#		sys $cmdPdbCompoundLines $pdbDir > $pdbCompound
#		sys cut -f 1 $pdbCompound | tr "[a-z]" "[A-Z]" | sort > $pdbCompoundList
#		sys grep -w -f $pdbCompoundList $idMapConfirmed > $idMapPdbCompound
#	}
#
#	task( msasCompound <- [tree, msa, idMapPdbCompound] )	sys $cmdEpistasisXL filterMsa $tree $msa $idMapPdbCompound > $msasCompound

for(int neigh=1; neigh < 5 ; neigh++ ) {
	llCompound := "$dir/likelihood.pdb_compound.neigh_$neigh.txt"
	task( llCompound <- [pdbCompoundList, idMapPdbCompound, msasCompound], cpus := 1) {
		sys $cmdEpistasis likelihoodpdbinteract $snpeffConfig $genome $tree $msasCompound $pdbDir $idMapConfirmed $qhat $aaFreqs $qhat2 $aa2Freqs $pdbCompound $aaContactDist $neigh | tee $llCompound
	}
}

distTh := "-30.0"
for(int neigh=1; neigh < 5 ; neigh++ ) {
	llCompound := "$dir/likelihood.pdb_compound.neigh_$neigh.txt"
	task( llCompound <- [pdbCompoundList, idMapPdbCompound, msasCompound], cpus := 1) {
		sys $cmdEpistasis likelihoodpdbinteract $snpeffConfig $genome $tree $msasCompound $pdbDir $idMapConfirmed $qhat $aaFreqs $qhat2 $aa2Freqs $pdbCompound $distTh $neigh | tee $llCompound
	}
}
# Done
wait
println "\nDone!"
